
- Bubble sort
  Bubble sort is one of the simplest and slowest algorithms used for sorting. It is designed in such a
  way that the highest value in a list of data bubbles makes its way to the top as the algorithm loops
  through iterations. Bubble sort requires little runtime memory to run because all the ordering occurs 
  within the original data structure. No new data structures are needed as temporary buffers. But its 
  worst-case performance is O(N2), which is quadratic time complexity (where N is the number of elements 
  being sorted). it is recommended to be used only for smaller datasets (below 1000 as general recommendation)

- Performance analysis of the bubble sort algorithm
  It is easy to see that bubble sort involves two levels of loops:
‚óè An outer loop: These are also called passes. For example, pass one is the first iteration
  of the outer loop.
‚óè An inner loop: This is when the remaining unsorted elements in the list are sorted until the highest
  value is bubbled to the right. The first pass will have N-1 comparisons, the second pass will have N-2
  comparisons, and each subsequent pass will reduce the number of comparisons by one.

- The time complexity of the bubble sort algorithm is as follows:
‚óè Best case: If the list is already sorted (or almost all elements are sorted), then the runtime
  complexity is O(1).
‚óè Worst case: If none or very few elements are sorted, then the worst-case runtime complexity is 
  O(n2) as the algorithm will have to completely run through both the inner and outer loops.

- Insertion sort
  The basic idea of insertion sort is that in each iteration, we remove a data point from the data
  structure we have and then insert it into its right position. That is why we call this the insertion
  sort algorithm.

- Performance analysis of the insertion sort algorithm
‚óè Best case scenario
  When the input data is already sorted, insertion sort demonstrates its best behavior. In such cases,
  the algorithm efficiently runs in linear time, denoted as O(n), 
‚óè Worst case scenario
  The efficiency takes a hit when the input is in reverse order, meaning the largest element is at the
  beginning. Here, for every element i (where i stands for the current element‚Äôs index in the loop),
  the inner loop might need to shift almost all preceding elements. The performance of insertion
  sort in this scenario can be represented mathematically by a quadratic function of the form:
                        (w x i^2) + (N x i) + ùúñ
‚Ä¢ w is a weighting factor, adjusting the effect of i^2.
‚Ä¢ N represents a coefficient that scales with the size of the input.
‚Ä¢ ùúñ is a constant, typically representing minor overheads not covered by the other terms.

‚óè Average case scenario
  Generally, the average performance of insertion sort tends to be quadratic, which can be 
  problematic for larger datasets.
  Use cases and recommendations
  Insertion sort is exceptionally efficient for:
‚óè Small datasets.
‚óè Nearly sorted datasets, where only a few elements are out of order.

- Merge sort
  Merge sort stands distinctively among sorting algorithms, like bubble sort and insertion sort,
  for its unique approach. Historically, it‚Äôs noteworthy that John von Neumann introduced this
  technique in 1940. While many sorting algorithms perform better on partially sorted data, merge
  sort remains unfazed; its performance remains consistent irrespective of the initial arrangement
  of the data. This resilience makes it the preferred choice for sorting large datasets.
  
- Divide and conquer: the core of merge sort
  Merge sort employs a divide-and-conquer strategy comprising two key phases ‚Äì splitting and merging:
‚óè Splitting phase: Unlike directly iterating over the list, this phase recursively divides the dataset 
  into halves. This division continues until each section reaches a minimal size (for illustrative 
  purposes, let‚Äôs say a single element). While it might seem counterintuitive to split data to such 
  granular levels, this granularity facilitates the organized merging in the next phase.
‚óè Merging phase: Here, the previously divided parts are systematically merged. The algorithm 
  continually processes and combines these sections until the entire list is sorted.





